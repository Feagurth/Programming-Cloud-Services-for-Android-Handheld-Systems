/*
 * 
 * Copyright 2014 Jules White
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

package org.magnum.mobilecloud.video;

import java.security.Principal;
import java.util.Collection;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletResponse;

import org.magnum.mobilecloud.video.client.VideoSvcApi;
import org.magnum.mobilecloud.video.repository.Video;
import org.magnum.mobilecloud.video.repository.VideoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.common.collect.Lists;

@Controller
public class VideoSvcController {

	/**
	 * You will need to create one or more Spring controllers to fulfill the
	 * requirements of the assignment. If you use this file, please rename it to
	 * something other than "AnEmptyController"
	 * 
	 * 
	 * ________ ________ ________ ________ ___ ___ ___ ________ ___ __ |\
	 * ____\|\ __ \|\ __ \|\ ___ \ |\ \ |\ \|\ \|\ ____\|\ \|\ \ \ \ \___|\ \
	 * \|\ \ \ \|\ \ \ \_|\ \ \ \ \ \ \ \\\ \ \ \___|\ \ \/ /|_ \ \ \ __\ \ \\\
	 * \ \ \\\ \ \ \ \\ \ \ \ \ \ \ \\\ \ \ \ \ \ ___ \ \ \ \|\ \ \ \\\ \ \ \\\
	 * \ \ \_\\ \ \ \ \____\ \ \\\ \ \ \____\ \ \\ \ \ \ \_______\ \_______\
	 * \_______\ \_______\ \ \_______\ \_______\ \_______\ \__\\ \__\
	 * \|_______|\|_______|\|_______|\|_______|
	 * \|_______|\|_______|\|_______|\|__| \|__|
	 * 
	 * 
	 */

	// Repositorio para almacenar los videos en la base de datos
	@Autowired
	private VideoRepository videos;

	/**
	 * Método para desear buena suerte
	 * 
	 * @return Cadena deseando buena suerte
	 */
	@RequestMapping(value = "/go", method = RequestMethod.GET)
	public @ResponseBody
	String goodLuck() {
		return "Good Luck!";
	}

	/**
	 * Método para añadir vídeos
	 * 
	 * @param v
	 *            El vídeo a añadir
	 * 
	 * @return El vídeo añadido
	 */
	@RequestMapping(value = VideoSvcApi.VIDEO_SVC_PATH, method = RequestMethod.POST)
	public @ResponseBody
	Video addVideo(@RequestBody Video v) {

		// Almacenamos el vídeo en la base de datos usando el repositorio JPA
		videos.save(v);

		// Devolvemos el vídeo
		return v;
	}

	/**
	 * Método para recuperar la lista de vídeos
	 * 
	 * @return Una colección con los vídeos almacenados
	 */
	@RequestMapping(value = VideoSvcApi.VIDEO_SVC_PATH, method = RequestMethod.GET)
	public @ResponseBody
	Collection<Video> getVideoList() {

		// Buscamos todos los vídeos que haya en el respositorio y los
		// devolvemos
		return Lists.newArrayList(videos.findAll());
	}

	/**
	 * Método para recuperar un vídeo usando su identificador
	 * 
	 * @param id
	 *            Identificador del vídeo a buscar
	 * @return El video buscado
	 */
	@RequestMapping(value = VideoSvcApi.VIDEO_SVC_PATH + "/{id}", method = RequestMethod.GET)
	public @ResponseBody
	Video getVideoById(@PathVariable("id") long id) {
		// Usamos el repositorio y buscamos un vídeo que corresponda con el id
		// introducido
		return videos.findOne(id);

	}

	/**
	 * Método para recuperar los vídeo usando su títutlo
	 * 
	 * @param title
	 *            Título de los videos a buscar
	 * @return Los vídeos que correspondan con la búsqueda
	 */
	@RequestMapping(value = VideoSvcApi.VIDEO_TITLE_SEARCH_PATH, method = RequestMethod.GET)
	public @ResponseBody
	Collection<Video> findByTitle(
			@RequestParam(VideoSvcApi.TITLE_PARAMETER) String title) {
		// Usamos el repositorio y buscamos los vídeos que se correspondan con
		// el título introducido
		return videos.findByName(title);
	}

	/**
	 * Método para recuperar los vídeos con una duración inferior a la
	 * introcudida
	 * 
	 * @param duration
	 *            Duración máxima de los vídeos a buscar
	 * @return Los vídeos que correspondan con la búsqueda
	 */
	@RequestMapping(value = VideoSvcApi.VIDEO_DURATION_SEARCH_PATH, method = RequestMethod.GET)
	public @ResponseBody
	Collection<Video> findByDurationLessThan(
			@RequestParam(VideoSvcApi.DURATION_PARAMETER) long duration) {
		// Usamos el repositorio y devolvemos los vídeos cuya duración sea
		// inferior a la especificada
		return videos.findByDurationLessThan(duration);
	}

	/**
	 * Método por el cual podemos agregar un "me gusta" a un vídeo
	 * 
	 * @param id
	 *            Identificador del vídeo
	 * @param p
	 *            Datos del usuario autentificado
	 * @return Respusta a la petición ejecutada
	 */
	@RequestMapping(value = VideoSvcApi.VIDEO_SVC_PATH + "/{id}/like", method = RequestMethod.POST)
	public ResponseEntity<Void> likeVideo(@PathVariable("id") long id,
			Principal p) {

		// Buscamos el vídeo usando el respositorio
		Video v = videos.findOne(id);

		// Comprobamos si el vídeo existe
		if (v == null) {
			// Si no existe, devolvemos la respuesta correspondiente
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
		}

		// Almacenamos el nombre del usuario autentificado
		String username = p.getName();

		// Recuperamos los nombres de usuario de la gente que ha dado un
		// "me gusta" al vídeo
		//List<String> likesUsernames = v.getLikesUsernames();
		
		Set<String> likesUsernames = v.getLikesUsernames();

		// Si el nombre del usuario está entre los nombres que han dado un
		// "me gusta" la petición no se puede procesar, puesto que no se puede
		// dar un "me gusta" dos veces
		if (likesUsernames.contains(username)) {
			// En este caso devolvemos la respuesta correspondiente
			return new ResponseEntity<Void>(HttpStatus.BAD_REQUEST);
		}

		// Añadimos el nombre de usuario autentificado a la lista de usuarios
		// que dieron un "me gusta"
		likesUsernames.add(username);

		// Asignamos la lista al vídeo
		v.setLikesUsernames(likesUsernames);

		// Asignamos el nuevo numero de "me gusta"
		v.setLikes(likesUsernames.size());

		// Usamos el repositorio para almacenar el vídeo
		videos.save(v);

		// Devolvemos la respuesta correspondiente
		return new ResponseEntity<Void>(HttpStatus.OK);
	}

	/**
	 * Método que no permite quitar un "me gusta" a un vídeo
	 * 
	 * @param id
	 *            Identificador del vídeo
	 * @param p
	 *            Datos del usuario autentificado
	 * @return Respuesta a la petición ejecutada
	 */
	@RequestMapping(value = VideoSvcApi.VIDEO_SVC_PATH + "/{id}/unlike", method = RequestMethod.POST)
	public ResponseEntity<Void> unlikeVideo(@PathVariable("id") long id,
			Principal p) {

		// Buscamos el vídeo correspondiente
		Video v = videos.findOne(id);

		// Verificamos si el vídeo existe
		if (v == null) {
			// Si no existe, devolvemos la respuesta correspondiente
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
		}

		// Almacenamos el nombre del usuario autentificado
		String userName = p.getName();

		// Recuperamos los nombres de usuario de la gente que ha dado un
		// "me gusta" al vídeo
		//List<String> userLikes = v.getLikesUsernames();
		Set<String> userLikes = v.getLikesUsernames();

		// Comprobamos si el usuario no está en la lista de gente que ha dado
		// un "me gusta" al vídeo. De no estar, no se puede quitar su "me gusta"
		if (!userLikes.contains(userName)) {
			// En este caso, devolvemos la respuesta correspondiente
			return new ResponseEntity<Void>(HttpStatus.BAD_REQUEST);
		}

		// Quitamos de la lista de "me gusta" del vídeo el nombre del usuario
		// autentificado
		userLikes.remove(userName);

		// Asignamos la lista al vídeo
		v.setLikesUsernames(userLikes);

		// Reducimos el número de "me gusta" del vídeo
		v.setLikes(v.getLikes() - 1);

		// Usamos el repositorio para almacenar el vídeo
		videos.save(v);

		// Devolvemos la respuesta correspondiente
		return new ResponseEntity<Void>(HttpStatus.OK);

	}

	/**
	 * Método que nos permite recuperar la lista de personas que han dado un
	 * "me gusta" a un vídeo
	 * 
	 * @param id
	 *            Identificador del vídeo
	 * @param response
	 *            Respuesta a la solicitud
	 * @return Lista de personas que han dado un "me gusta" a un vídeo
	 */
	@RequestMapping(value = VideoSvcApi.VIDEO_SVC_PATH + "/{id}/likedby", method = RequestMethod.GET)
	public @ResponseBody
	Collection<String> getListLikes(@PathVariable("id") long id,
			HttpServletResponse response) {

		// Buscamos el vídeo correspondiente
		Video v = videos.findOne(id);

		// Comprobamos si el vídeo existe
		if (v == null) {

			// Si no existe, preparamos la respuesta correspondiente
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			// Devolvemos nulo
			return null;
		}

		// En caso contrario, devolvemos la lista de personas que dieron un
		// "me gusta" al vídeo
		return v.getLikesUsernames();
	}

}
